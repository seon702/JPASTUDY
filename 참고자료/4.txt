4. 엔티티 매핑

객체와 테이블 매핑
• 데이터베이스 스키마 자동 생성
• 필드와 컬럼 매핑
• 기본 키 매핑
• 실전 예제 - 1. 요구사항 분석과 기본 매핑

p4
엔티티 매핑소개

객체와 테이블 매핑: @Entity, @Table
필드와 컬럼 매핑: @Column
기본 키 매핑: @Id
연관관계 매핑: @ManyToOne,@JoinColumn - 맴버와 팀 등등 관계형 DB에서 


p6 객체와 테이블 매핑
@Entity
• @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
• JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수

주의
• 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)
• final 클래스, enum, interface, inner 클래스 사용X
• 저장할 필드에 final 사용 X

p7
@Entitiy 속성 정리

p9
데이터베이스 스키마 자동생성
DDL을 애플리케이션 실행 시점에 자동 생성
테이블 중심 -> 객체 중심
데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
이렇게 생성된 DDL은 개발 장비에서만 사용
생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

hibernate.hbm2ddl.auto 옵션
create 기존테이블 삭제 후 다시 생성 (DROP + CREATE)
create-drop create와 같으나 종료시점에 테이블 DROP
update 변경분만 반영(운영DB에는 사용하면 안됨)
validate 엔티티와 테이블이 정상 매핑되었는지만 확인
none 사용하지 않음

p13
주의사항 절대 운영장비에는 create, create-drop, update 사용하면 안된다.

개발 초기 단계는 create 또는 update
테스트 서버는 update 또는 validate
스테이징과 운영 서버는 validate 또는 none

로컬에서만 사용해라 가능한

p14
DDL 생성 기능
DDL 생성 기능은 DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않는다.

p15
필드와 컬럼 매핑


p23
매핑하기 싫다면 @Transient


p24
기본 키 매핑
직접 할당: @Id만 사용
• 자동 생성(@GeneratedValue)
• IDENTITY: 데이터베이스에 위임, MYSQL
• SEQUENCE: 데이터베이스 시퀀스 오브젝트 사용, ORACLE
• @SequenceGenerator 필요
• TABLE: 키 생성용 테이블 사용, 모든 DB에서 사용
• @TableGenerator 필요
• AUTO: 방언에 따라 자동 지정, 기본값

p28
IDENTITY 전략 - 특징
IDENTITY는 모아서 보내는 전략 불가능
em.persist 단계에서 바로 보내짐

p37
권장하는 식별자 전략
• 기본 키 제약 조건: null 아님, 유일, "변하면 안된다."
• 미래까지 이 조건을 만족하는 자연키는 찾기 어렵다. 대리키(대체키)를 사용하자.
• 예를 들어 주민등록번호도 기본 키로 적절하기 않다.
• 권장: Long형 + 대체키(UUID) + 키 생성전략 사용

